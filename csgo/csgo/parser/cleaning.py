""" Data cleaning functions
"""

import numpy as np
import pandas as pd
import textdistance

from csgo.analytics.distance import point_distance


def clean_footsteps(df, max_dist=500):
    """ A function to clean a dataframe of footsteps, as created by the match_parser
    """
    for r in range(0, df.RoundNum.max() + 1):
        for p in df.SteamID.unique():
            player_df = df[(df["RoundNum"] == r) & (df["SteamID"] == p)]
            player_pos = []
            player_pos_clean = []
            for i, row in player_df.iterrows():
                player_pos.append((row["X"], row["Y"], row["Z"]))
            for i, pos in enumerate(player_pos):
                if i == 0:
                    player_pos_clean.append(0)
                else:
                    player_pos_clean.append(
                        distance.euclidean(list(pos), list(player_pos[i - 1]))
                    )
    return NotImplementedError


def associate_entities(game_names=[], entity_names=[], metric="LCSS"):
    """ A function to return a dict of associated entities. Uses longest common subsequence distance.

    Args:
        game_names (list)   : A list of names generated by the demofile
        entity_names (list) : A list of names

    Returns:
        entity_dict (dict) : A dictionary where the keys are entries in game_names
    """
    if metric.lower() == "lcss":
        dist_metric = textdistance.lcsseq.distance
    elif metric.lower() == "hamming":
        dist_metric = textdistance.hamming.distance
    elif metric.lower() == "levenshtein":
        dist_metric = textdistance.levenshtein.distance
    elif metric.lower() == "jaro":
        dist_metric = textdistance.jaro.distance
    else:
        raise ValueError("Metric can only be LCSS, Hamming, Levenshtein or Jaro")
    entity_dict = {}
    for gn in game_names:
        name_distances = []
        names = []
        for p in entity_names:
            if gn is not None and gn is not np.nan:
                name_distances.append(dist_metric(gn, p))
                names.append(p)
        if gn is not None and gn is not np.nan:
            entity_dict[gn] = names[np.argmin(name_distances)]
    entity_dict[None] = None
    return entity_dict


def replace_entities(df, col_name, entity_dict):
    """ A function to replace values in a Pandas df column given an entity dict, as created in associate_entities()

    Args:
        df (DataFrame)     : A Pandas DataFrame
        col_name (string)  : A column in the Pandas DataFrame
        entity_dict (dict) : A dictionary as created in the associate_entities() function
    """
    if col_name not in df.columns:
        raise ValueError("Column does not exist!")
    df[col_name].replace(entity_dict, inplace=True)
    return df


def remove_dupes(df, cols):
    """ A function to remove duplicates by taking the first occurence

    Args:
        df (DataFrame) : A Pandas DataFrame
        cols (list)    : A list of columns to groupby on
    """
    return df.groupby(cols).first().reset_index()
